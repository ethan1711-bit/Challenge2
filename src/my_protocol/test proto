import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class MyProtocol extends IRDTProtocol {

    static final int HEADERSIZE = 2; // Header contains sequence number
    static final int DATASIZE = 248;
    static final int WINDOW_SIZE = 4; // Sliding window size
    static final int TIMEOUT = 1000; // Timeout in milliseconds

    private int base = 0;
    private int nextSeqNum = 0;
    private Set<Integer> receivedAcks = new HashSet<>();

    @Override
    public void sender() {
        System.out.println("Sending...");

        Integer[] fileContents = Utils.getFileContents(getFileID());
        int totalPackets = (int) Math.ceil((double) fileContents.length / DATASIZE);

        while (base < totalPackets) {
            // Send packets within window
            while (nextSeqNum < base + WINDOW_SIZE && nextSeqNum < totalPackets) {
                sendPacket(fileContents, nextSeqNum);
                nextSeqNum++;
            }

            // Check for acknowledgments
            Integer[] ackPacket = getNetworkLayer().receivePacket();
            if (ackPacket != null && ackPacket.length >= HEADERSIZE) {
                int ackNum = ackPacket[1]; // Extract acknowledgment number
                if (ackNum >= base) {
                    receivedAcks.add(ackNum);
                    while (receivedAcks.contains(base)) {
                        base++; // Slide window forward
                    }
                }
            }

            // Handle timeouts
            if (System.currentTimeMillis() - lastSentTime(base) > TIMEOUT) {
                resendPacket(fileContents, base);
            }

            try {
                Thread.sleep(10);
            } catch (InterruptedException ignored) {}
        }

        System.out.println("File sent successfully.");
    }

    private void sendPacket(Integer[] fileContents, int seqNum) {
        int filePointer = seqNum * DATASIZE;
        int datalen = Math.min(DATASIZE, fileContents.length - filePointer);
        Integer[] pkt = new Integer[HEADERSIZE + datalen];
        
        pkt[0] = 123; // Header (can be used for flags)
        pkt[1] = seqNum; // Sequence number

        System.arraycopy(fileContents, filePointer, pkt, HEADERSIZE, datalen);
        getNetworkLayer().sendPacket(pkt);
        System.out.println("Sent packet: Seq=" + seqNum);
    }

    private void resendPacket(Integer[] fileContents, int seqNum) {
        System.out.println("Resending packet: Seq=" + seqNum);
        sendPacket(fileContents, seqNum);
    }

    private long lastSentTime(int seqNum) {
        // Placeholder method to track when a packet was last sent
        return System.currentTimeMillis();
    }

    @Override
    public Integer[] receiver() {
        System.out.println("Receiving...");

        Integer[] fileContents = new Integer[0];
        int expectedSeqNum = 0;

        boolean stop = false;
        while (!stop) {
            Integer[] packet = getNetworkLayer().receivePacket();

            if (packet != null && packet.length >= HEADERSIZE) {
                int seqNum = packet[1]; // Extract sequence number

                System.out.println("Received packet: Seq=" + seqNum);

                if (seqNum == expectedSeqNum) {
                    int oldlength = fileContents.length;
                    int datalen = packet.length - HEADERSIZE;
                    fileContents = Arrays.copyOf(fileContents, oldlength + datalen);
                    System.arraycopy(packet, HEADERSIZE, fileContents, oldlength, datalen);
                    expectedSeqNum++;
                }

                sendAck(seqNum);
            } else {
                try {
                    Thread.sleep(10);
                } catch (InterruptedException ignored) {}
            }

            // Assume stop when all packets are received (or define a stop condition)
        }

        return fileContents;
    }

    private void sendAck(int seqNum) {
        Integer[] ack = new Integer[HEADERSIZE];
        ack[0] = 123; // Header
        ack[1] = seqNum; // Acknowledgment number
        getNetworkLayer().sendPacket(ack);
        System.out.println("Sent ACK: " + seqNum);
    }
}